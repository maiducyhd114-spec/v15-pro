generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* Sao chép phần model bên dưới từ schema.prisma hiện tại nếu cần
   hoặc giữ nguyên models giống file chính.
*/

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  role      Role     @default(USER)
  subjects  Subject[] @relation("CreatedSubjects")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  MOD
  ADMIN
}

model Subject {
  id        Int        @id @default(autoincrement())
  slug      String     @unique
  title     String
  dept      String
  summary   String
  status    Status     @default(PUBLISHED)
  createdBy Int?
  creator   User?      @relation("CreatedSubjects", fields: [createdBy], references: [id])
  tags      SubjectTag[]
  resources Resource[]
  views     Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum Status {
  DRAFT
  PENDING
  PUBLISHED
}

model Resource {
  id        Int      @id @default(autoincrement())
  type      String
  label     String
  url       String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
}

model Tag {
  id    Int          @id @default(autoincrement())
  name  String       @unique
  subs  SubjectTag[]
}

model SubjectTag {
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int

  @@id([subjectId, tagId])
}

/// NextAuth tables (prisma adapter simplified if needed)
model Account {
  id                Int       @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}